'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.open = open;
exports.read = read;
exports.close = close;
exports.readlink = readlink;
exports.lstat = lstat;
exports.stat = stat;
exports.readdir = readdir;
exports.rmdir = rmdir;
exports.unlink = unlink;

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function open(path, mode) {
  return new Promise((resolve, reject) => {
    fs.open(path, mode, (err, fd) => {
      err ? reject(err) : resolve(fd);
    });
  });
}

async function read(fd, length) {
  let buffer = Buffer.allocUnsafe(length);
  let bytesRead = await new Promise((resolve, reject) => {
    // noinspection JSIgnoredPromiseFromCall
    fs.read(fd, buffer, 0, length, null, (err, bytesRead) => {
      err ? reject(err) : resolve(bytesRead);
    });
  });
  return buffer.slice(0, bytesRead);
}

function close(fd) {
  return new Promise((resolve, reject) => {
    fs.close(fd, err => {
      err ? reject(err) : resolve();
    });
  });
}

async function readlink(path) {
  const buffer = new Promise((resolve, reject) => {
    fs.readlink(path, (err, dest) => {
      err ? reject(err) : resolve(dest);
    });
  });
  return buffer instanceof Buffer ? buffer.toString() : buffer;
}

function lstat(path) {
  return new Promise((resolve, reject) => {
    fs.lstat(path, (err, stat) => {
      err ? reject(err) : resolve(stat);
    });
  });
}

// noinspection JSUnusedGlobalSymbols
function stat(path) {
  return new Promise((resolve, reject) => {
    fs.stat(path, (err, stat) => {
      err ? reject(err) : resolve(stat);
    });
  });
}

function readdir(path) {
  return new Promise((resolve, reject) => {
    fs.readdir(path, (err, names) => {
      err ? reject(err) : resolve(names);
    });
  });
}

function rmdir(path) {
  return new Promise((resolve, reject) => {
    fs.rmdir(path, err => {
      err ? reject(err) : resolve();
    });
  });
}

function unlink(path) {
  return new Promise((resolve, reject) => {
    fs.unlink(path, err => {
      err ? reject(err) : resolve();
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9wcm9taXNlX2ZzLmpzIl0sIm5hbWVzIjpbIm9wZW4iLCJyZWFkIiwiY2xvc2UiLCJyZWFkbGluayIsImxzdGF0Iiwic3RhdCIsInJlYWRkaXIiLCJybWRpciIsInVubGluayIsImZzIiwicGF0aCIsIm1vZGUiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVyciIsImZkIiwibGVuZ3RoIiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJieXRlc1JlYWQiLCJzbGljZSIsImRlc3QiLCJ0b1N0cmluZyIsIm5hbWVzIl0sIm1hcHBpbmdzIjoiOzs7OztRQU1nQkEsSSxHQUFBQSxJO1FBUU1DLEksR0FBQUEsSTtRQVdOQyxLLEdBQUFBLEs7UUFRTUMsUSxHQUFBQSxRO1FBU05DLEssR0FBQUEsSztRQVNBQyxJLEdBQUFBLEk7UUFRQUMsTyxHQUFBQSxPO1FBUUFDLEssR0FBQUEsSztRQVFBQyxNLEdBQUFBLE07O0FBekVoQjs7SUFBWUMsRTs7OztBQUlMLFNBQVNULElBQVQsQ0FBY1UsSUFBZCxFQUE0QkMsSUFBNUIsRUFBMkQ7QUFDaEUsU0FBTyxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3RDTCxPQUFHVCxJQUFILENBQVFVLElBQVIsRUFBY0MsSUFBZCxFQUFvQixDQUFDSSxHQUFELEVBQU1DLEVBQU4sS0FBYTtBQUMvQkQsWUFBTUQsT0FBT0MsR0FBUCxDQUFOLEdBQW9CRixRQUFRRyxFQUFSLENBQXBCO0FBQ0QsS0FGRDtBQUdELEdBSk0sQ0FBUDtBQUtEOztBQUVNLGVBQWVmLElBQWYsQ0FBb0JlLEVBQXBCLEVBQWdDQyxNQUFoQyxFQUFpRTtBQUN0RSxNQUFJQyxTQUFTQyxPQUFPQyxXQUFQLENBQW1CSCxNQUFuQixDQUFiO0FBQ0EsTUFBSUksWUFBWSxNQUFNLElBQUlULE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7QUFDckQ7QUFDQUwsT0FBR1IsSUFB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UCxDQUFOLEdBQW9CRixTQUFwQjtBQUNELEtBRkQ7QUFHRCxHQUpNLENBQVA7QUFLRCIsImZpbGUiOiJwcm9taXNlX2ZzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy9AZmxvd1xuXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmV4cG9ydCB0eXBlIFN0YXRzID0gZnMuU3RhdHM7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuKHBhdGg6IHN0cmluZywgbW9kZTogc3RyaW5nKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmcy5vcGVuKHBhdGgsIG1vZGUsIChlcnIsIGZkKSA9PiB7XG4gICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoZmQpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlYWQoZmQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpOiBQcm9taXNlPEJ1ZmZlcj4ge1xuICBsZXQgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aCk7XG4gIGxldCBieXRlc1JlYWQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgLy8gbm9pbnNwZWN0aW9uIEpTSWdub3JlZFByb21pc2VGcm9tQ2FsbFxuICAgIGZzLnJlYWQoZmQsIGJ1ZmZlciwgMCwgbGVuZ3RoLCBudWxsLCAoZXJyLCBieXRlc1JlYWQpID0+IHtcbiAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShieXRlc1JlYWQpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGJ1ZmZlci5zbGljZSgwLCBieXRlc1JlYWQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvc2UoZmQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZzLmNsb3NlKGZkLCBlcnIgPT4ge1xuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZGxpbmsocGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgY29uc3QgYnVmZmVyID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZzLnJlYWRsaW5rKHBhdGgsIChlcnIsIGRlc3QpID0+IHtcbiAgICAgIGVyciA/IHJlamVjdChlcnIpIDogcmVzb2x2ZShkZXN0KTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBidWZmZXIgaW5zdGFuY2VvZiBCdWZmZXIgPyBidWZmZXIudG9TdHJpbmcoKSA6IGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxzdGF0KHBhdGg6IHN0cmluZyk6IFByb21pc2U8U3RhdHM+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmcy5sc3RhdChwYXRoLCAoZXJyLCBzdGF0KSA9PiB7XG4gICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoc3RhdCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG5leHBvcnQgZnVuY3Rpb24gc3RhdChwYXRoOiBzdHJpbmcpOiBQcm9taXNlPFN0YXRzPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnMuc3RhdChwYXRoLCAoZXJyLCBzdGF0KSA9PiB7XG4gICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoc3RhdCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZGRpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnMucmVhZGRpcihwYXRoLCAoZXJyLCBuYW1lcykgPT4ge1xuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKG5hbWVzKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBybWRpcihwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBmcy5ybWRpcihwYXRoLCBlcnIgPT4ge1xuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5saW5rKHBhdGg6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGZzLnVubGluayhwYXRoLCBlcnIgPT4ge1xuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuIl19