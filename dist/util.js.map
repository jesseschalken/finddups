{"version":3,"sources":["../src/util.js"],"names":["replaceLn","printLn","formatBytes","pad","text","CLEAR","print","Promise","resolve","reject","process","stdout","write","err","n","floor","pow","max","abs","log","Math","i","toFixed","str","len","repeat","length"],"mappings":";;;;;QAGgBA,S,GAAAA,S;QAKAC,O,GAAAA,O;QAYAC,W,GAAAA,W;QASAC,G,GAAAA,G;;;AA3BhB;AACO,SAASH,SAAT,CAAmBI,IAAnB,EAAgD;AACrD,QAAMC,QAAQ,mBAAd;AACA,SAAOC,MAAMD,QAAQD,IAAd,CAAP;AACD;;AAEM,SAASH,OAAT,CAAiBG,IAAjB,EAA8C;AACnD,SAAOE,MAAMF,OAAO,IAAb,CAAP;AACD;;AAED,SAASE,KAAT,CAAeF,IAAf,EAA4C;AAC1C,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,YAAQC,MAAR,CAAeC,KAAf,CAAqBR,IAArB,EAA2BS,OAAO;AAChCA,YAAMJ,OAAOI,GAAP,CAAN,GAAoBL,SAApB;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AAEM,SAASN,WAAT,CAAqBY,CAArB,EAAwC;AAC7C,QAAM,EAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,GAAvB,KAA8BC,IAApC;AACA,MAAIC,IAAIN,MAAMI,IAAIF,IAAIC,IAAIJ,CAAJ,CAAJ,EAAY,CAAZ,CAAJ,IAAsBK,IAAI,IAAJ,CAA5B,CAAR;AACA,MAAIE,MAAM,CAAV,EAAa;AACX,WAAOP,IAAI,IAAX;AACD;AACD,SAAO,CAACA,IAAIE,IAAI,IAAJ,EAAUK,CAAV,CAAL,EAAmBC,OAAnB,CAA2B,CAA3B,IAAgC,GAAhC,GAAsC,YAAYD,CAAZ,CAAtC,GAAuD,GAA9D;AACD;;AAEM,SAASlB,GAAT,CAAaoB,GAAb,EAA0BC,GAA1B,EAA+C;AACpD,SAAOD,MAAM,IAAIE,MAAJ,CAAWL,KAAKH,GAAL,CAAS,CAAT,EAAYO,MAAMD,IAAIG,MAAtB,CAAX,CAAb;AACD","file":"util.js","sourcesContent":["// @flow\n\n// noinspection JSUnusedGlobalSymbols\nexport function replaceLn(text: string): Promise<void> {\n  const CLEAR = '\\r\\x1B[2K\\x1B[?7l';\n  return print(CLEAR + text);\n}\n\nexport function printLn(text: string): Promise<void> {\n  return print(text + '\\n');\n}\n\nfunction print(text: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    process.stdout.write(text, err => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n\nexport function formatBytes(n: number): string {\n  const {floor, pow, max, abs, log} = Math;\n  let i = floor(log(max(abs(n), 1)) / log(1000));\n  if (i === 0) {\n    return n + ' B';\n  }\n  return (n / pow(1000, i)).toFixed(2) + ' ' + ' KMGTPEZY'[i] + 'B';\n}\n\nexport function pad(str: string, len: number): string {\n  return str + ' '.repeat(Math.max(0, len - str.length));\n}\n"]}