{"version":3,"sources":["../src/util.js"],"names":["replaceLn","printLn","formatBytes","formatNumber","padString","waitIO","delay","trackProgress","newCid","shuffle","waitAll","partition","sum","text","CLEAR","print","Promise","resolve","reject","process","stdout","write","err","n","floor","pow","max","abs","log","Math","i","roundDown","number","precision","factor","decimals","integers","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","minimumIntegerDigits","str","len","repeat","length","setImmediate","delayMs","setTimeout","func","loop","running","id","setInterval","clearInterval","nextCid","a","j","random","a_i","promises","promise","AsyncCap","constructor","count","queue","inc","push","run","dec","shift","items","t","f","item","ret"],"mappings":"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","file":"util.js","sourcesContent":["// @flow\n\n// noinspection JSUnusedGlobalSymbols\nexport function replaceLn(text: string): Promise<void> {\n  const CLEAR = '\\r\\x1B[2K\\x1B[?7l';\n  return print(CLEAR + text);\n}\n\nexport function printLn(text: string = ''): Promise<void> {\n  return print(text + '\\n');\n}\n\nfunction print(text: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    process.stdout.write(text, (err: mixed) => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n\nexport function formatBytes(n: number): string {\n  const {floor, pow, max, abs, log} = Math;\n  let i = floor(log(max(abs(n), 1)) / log(1000));\n  return i === 0\n    ? formatNumber(n, 0) + ' B'\n    : formatNumber(n / pow(1000, i), 2) + ' ' + ' KMGTPEZY'[i] + 'B';\n}\n\nfunction roundDown(number: number, precision: number): number {\n  let factor = Math.pow(10, precision);\n  return Math.floor(number * factor) / factor;\n}\n\nexport function formatNumber(\n  n: number,\n  decimals: number = 0,\n  integers: number = 1,\n): string {\n  n = roundDown(n, decimals);\n  return n.toLocaleString(undefined, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n    minimumIntegerDigits: integers,\n  });\n}\n\nexport function padString(str: string, len: number): string {\n  return str + ' '.repeat(Math.max(0, len - str.length));\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function waitIO(): Promise<void> {\n  return new Promise(resolve => {\n    setImmediate(resolve);\n  });\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function delay(delayMs: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delayMs);\n  });\n}\n\nexport async function trackProgress(\n  func: () => Promise<void>,\n  loop: () => Promise<void>,\n  delayMs: number,\n): Promise<void> {\n  let running = false;\n  let id = setInterval(async () => {\n    if (!running) {\n      running = true;\n      await loop();\n      running = false;\n    }\n  }, delayMs);\n  await func();\n  clearInterval(id);\n  await loop();\n}\n\nlet nextCid = 1;\nexport function newCid(): number {\n  return nextCid++;\n}\n\n/** Shuffle an array in place */\nexport function shuffle<T>(a: T[]): void {\n  let n = a.length;\n  // Iterate through all but the last index\n  for (let i = 0; i < n - 1; i++) {\n    // Pick a random index from i to the end of the array\n    let j = i + Math.floor(Math.random() * (n - i));\n    // Swap this element with the random one\n    let a_i = a[i];\n    a[i] = a[j];\n    a[j] = a_i;\n  }\n}\n\n/** Promise.all but without building an array of return values */\nexport async function waitAll(\n  promises: Iterable<Promise<void>>,\n): Promise<void> {\n  for (let promise of promises) {\n    await promise;\n  }\n}\n\nexport interface PendingPromise<T> {\n  +resolve: T => void;\n  +reject: mixed => void;\n}\n\n/**\n * This class is to cap the number of asynchronous jobs entering some code\n * block or using some resource. Construct it with the maximum number of\n * concurrent jobs as a parameter, and use <tt>await counter.inc();</tt> to\n * occupy a slot and <tt>counter.dec();</tt> to return it.\n */\nexport class AsyncCap {\n  count: number = 0;\n  queue: PendingPromise<void>[] = [];\n  max: number;\n  constructor(max: number) {\n    this.max = max;\n  }\n  inc(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.queue.push({resolve, reject});\n      this.run();\n    });\n  }\n  dec(): void {\n    this.count--;\n    this.run();\n  }\n  run(): void {\n    while (this.queue.length > 0 && this.count < this.max) {\n      this.count++;\n      this.queue.shift().resolve();\n    }\n  }\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function partition<T>(\n  items: Iterable<T>,\n  func: T => boolean,\n): [T[], T[]] {\n  let t = [];\n  let f = [];\n  for (let item of items) {\n    (func(item) ? t : f).push(item);\n  }\n  return [t, f];\n}\n\nexport function sum<T>(items: Iterable<T>, func: T => number): number {\n  let ret = 0;\n  for (let item of items) {\n    ret += func(item);\n  }\n  return ret;\n}\n"]}