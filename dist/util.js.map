{"version":3,"sources":["../src/util.js"],"names":["replaceLn","printLn","formatBytes","formatNumber","padString","text","CLEAR","print","Promise","resolve","reject","process","stdout","write","err","n","floor","pow","max","abs","log","Math","i","roundDown","number","precision","factor","decimals","integers","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","minimumIntegerDigits","str","len","repeat","length","Interval","constructor","func","delayMs","running","id","setInterval","stop","clearInterval","nextCid","newCid"],"mappings":";;;;;QAGgBA,S,GAAAA,S;QAKAC,O,GAAAA,O;QAYAC,W,GAAAA,W;QAYAC,Y,GAAAA,Y;QAUAC,S,GAAAA,S;;;AAxChB;AACO,SAASJ,SAAT,CAAmBK,IAAnB,EAAgD;AACrD,QAAMC,QAAQ,mBAAd;AACA,SAAOC,MAAMD,QAAQD,IAAd,CAAP;AACD;;AAEM,SAASJ,OAAT,CAAiBI,OAAe,EAAhC,EAAmD;AACxD,SAAOE,MAAMF,OAAO,IAAb,CAAP;AACD;;AAED,SAASE,KAAT,CAAeF,IAAf,EAA4C;AAC1C,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,YAAQC,MAAR,CAAeC,KAAf,CAAqBR,IAArB,EAA2BS,OAAO;AAChCA,YAAMJ,OAAOI,GAAP,CAAN,GAAoBL,SAApB;AACD,KAFD;AAGD,GAJM,CAAP;AAKD;;AAEM,SAASP,WAAT,CAAqBa,CAArB,EAAwC;AAC7C,QAAM,EAACC,KAAD,EAAQC,GAAR,EAAaC,GAAb,EAAkBC,GAAlB,EAAuBC,GAAvB,KAA8BC,IAApC;AACA,MAAIC,IAAIN,MAAMI,IAAIF,IAAIC,IAAIJ,CAAJ,CAAJ,EAAY,CAAZ,CAAJ,IAAsBK,IAAI,IAAJ,CAA5B,CAAR;AACA,SAAOE,MAAM,CAAN,GAAUP,IAAI,IAAd,GACAZ,aAAaY,IAAIE,IAAI,IAAJ,EAAUK,CAAV,CAAjB,EAA+B,CAA/B,IAAoC,GAApC,GAA0C,YAAYA,CAAZ,CAA1C,GAA2D,GADlE;AAED;;AAED,SAASC,SAAT,CAAmBC,MAAnB,EAAmCC,SAAnC,EAA8D;AAC5D,MAAIC,SAASL,KAAKJ,GAAL,CAAS,EAAT,EAAaQ,SAAb,CAAb;AACA,SAAOJ,KAAKL,KAAL,CAAWQ,SAASE,MAApB,IAA8BA,MAArC;AACD;;AAEM,SAASvB,YAAT,CAAsBY,CAAtB,EAAiCY,QAAjC,EACAC,WAAmB,CADnB,EAC8B;AACnCb,MAAIQ,UAAUR,CAAV,EAAaY,QAAb,CAAJ;AACA,SAAOZ,EAAEc,cAAF,CAAiBC,SAAjB,EAA4B;AACjCC,2BAAuBJ,QADU;AAEjCK,2BAAuBL,QAFU;AAGjCM,0BAAsBL;AAHW,GAA5B,CAAP;AAKD;;AAEM,SAASxB,SAAT,CAAmB8B,GAAnB,EAAgCC,GAAhC,EAAqD;AAC1D,SAAOD,MAAM,IAAIE,MAAJ,CAAWf,KAAKH,GAAL,CAAS,CAAT,EAAYiB,MAAMD,IAAIG,MAAtB,CAAX,CAAb;AACD;;AAED;;;;AAIO,MAAMC,QAAN,CAAe;AAEpBC,cAAYC,IAAZ,EAAuCC,OAAvC,EAAwD;AACtD,QAAIC,UAAU,KAAd;AACA,SAAKC,EAAL,GAAUC,YAAY,YAAY;AAChC,UAAI,CAACF,OAAL,EAAc;AACZA,kBAAU,IAAV;AACA,cAAMF,MAAN;AACAE,kBAAU,KAAV;AACD;AACF,KANS,EAMPD,OANO,CAAV;AAOD;AACDI,SAAa;AACXC,kBAAc,KAAKH,EAAnB;AACD;AAdmB;;QAATL,Q,GAAAA,Q;AAiBb,IAAIS,UAAU,CAAd;AACO,MAAMC,0BAAS,MAAMD,SAArB","file":"util.js","sourcesContent":["// @flow\n\n// noinspection JSUnusedGlobalSymbols\nexport function replaceLn(text: string): Promise<void> {\n  const CLEAR = '\\r\\x1B[2K\\x1B[?7l';\n  return print(CLEAR + text);\n}\n\nexport function printLn(text: string = ''): Promise<void> {\n  return print(text + '\\n');\n}\n\nfunction print(text: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    process.stdout.write(text, err => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n\nexport function formatBytes(n: number): string {\n  const {floor, pow, max, abs, log} = Math;\n  let i = floor(log(max(abs(n), 1)) / log(1000));\n  return i === 0 ? n + ' B' :\n         formatNumber(n / pow(1000, i), 2) + ' ' + ' KMGTPEZY'[i] + 'B';\n}\n\nfunction roundDown(number: number, precision: number): number {\n  let factor = Math.pow(10, precision);\n  return Math.floor(number * factor) / factor;\n}\n\nexport function formatNumber(n: number, decimals: number,\n       integers: number = 1): string {\n  n = roundDown(n, decimals);\n  return n.toLocaleString(undefined, {\n    minimumFractionDigits: decimals,\n    maximumFractionDigits: decimals,\n    minimumIntegerDigits: integers,\n  });\n}\n\nexport function padString(str: string, len: number): string {\n  return str + ' '.repeat(Math.max(0, len - str.length));\n}\n\n/**\n * Version of window.setInterval() that takes an async function instead of a\n * regular function, and doesn't call it if the previous call hasn't finished.\n */\nexport class Interval {\n  id: number;\n  constructor(func: () => Promise<void>, delayMs: number) {\n    let running = false;\n    this.id = setInterval(async () => {\n      if (!running) {\n        running = true;\n        await func();\n        running = false;\n      }\n    }, delayMs);\n  }\n  stop(): void {\n    clearInterval(this.id);\n  }\n}\n\nlet nextCid = 1;\nexport const newCid = () => nextCid++;\n"]}