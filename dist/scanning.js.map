{"version":3,"sources":["../src/scanning.js"],"names":["traverse","scan","fs","FileType","create","stat","isFile","File","isDirectory","Directory","isSymbolicLink","Symlink","isBlockDevice","BlockDev","isCharacterDevice","CharDev","isFIFO","FIFO","isSocket","Socket","Unknown","constructor","name","cid","Path","parent","get","join","node","child","children","createNode","path","lstat","type","size","Promise","all","readdir","map","paths","count","roots","root","push"],"mappings":";;;;;;QA+DiBA,Q,GAAAA,Q;QAyBKC,I,GAAAA,I;;AAvFtB;;IAAYC,E;;AACZ;;AACA;;;;AAEO,MAAMC,QAAN,CAAe;AACpB,SAAOC,MAAP,CAAcC,IAAd,EAAwC;AACtC,QAAIA,KAAKC,MAAL,EAAJ,EAAmB,OAAOH,SAASI,IAAhB;AACnB,QAAIF,KAAKG,WAAL,EAAJ,EAAwB,OAAOL,SAASM,SAAhB;AACxB,QAAIJ,KAAKK,cAAL,EAAJ,EAA2B,OAAOP,SAASQ,OAAhB;AAC3B,QAAIN,KAAKO,aAAL,EAAJ,EAA0B,OAAOT,SAASU,QAAhB;AAC1B,QAAIR,KAAKS,iBAAL,EAAJ,EAA8B,OAAOX,SAASY,OAAhB;AAC9B,QAAIV,KAAKW,MAAL,EAAJ,EAAmB,OAAOb,SAASc,IAAhB;AACnB,QAAIZ,KAAKa,QAAL,EAAJ,EAAqB,OAAOf,SAASgB,MAAhB;AACrB,WAAOhB,SAASiB,OAAhB;AACD;;AAaDC,cAAYC,IAAZ,EAA0B;AACxB,SAAKC,GAAL,GAAW,mBAAX;AACA,SAAKD,IAAL,GAAYA,IAAZ;AACD;AA1BmB;;QAATnB,Q,GAAAA,Q,EA6Bb;;;;;;AA7BaA,Q,CAYJI,I,GAAiB,IAAIJ,QAAJ,CAAa,MAAb,C;AAZbA,Q,CAaJM,S,GAAsB,IAAIN,QAAJ,CAAa,KAAb,C;AAblBA,Q,CAcJQ,O,GAAoB,IAAIR,QAAJ,CAAa,MAAb,C;AAdhBA,Q,CAeJU,Q,GAAqB,IAAIV,QAAJ,CAAa,OAAb,C;AAfjBA,Q,CAgBJY,O,GAAoB,IAAIZ,QAAJ,CAAa,MAAb,C;AAhBhBA,Q,CAiBJc,I,GAAiB,IAAId,QAAJ,CAAa,MAAb,C;AAjBbA,Q,CAkBJgB,M,GAAmB,IAAIhB,QAAJ,CAAa,QAAb,C;AAlBfA,Q,CAmBJiB,O,GAAoB,IAAIjB,QAAJ,CAAa,SAAb,C;AAetB,MAAMqB,IAAN,CAAW;AAGhBH,cAAYC,IAAZ,EAA0BG,MAA1B,EAAyC;AACvC,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKG,MAAL,GAAcA,MAAd;AACD;AACDC,QAAc;AACZ,QAAI,EAACJ,IAAD,EAAOG,MAAP,KAAiB,IAArB;AACA,WAAOA,SAASA,OAAOE,IAAP,CAAYL,IAAZ,CAAT,GAA6BA,IAApC;AACD;AACD;AACAK,OAAKL,IAAL,EAA2B;AACzB,WAAO,KAAKI,GAAL,iBAAuBJ,IAA9B;AACD;AAde;;QAALE,I,GAAAA,I;AAwBN,UAAUxB,QAAV,CAAmB4B,IAAnB,EAA+C;AACpD,QAAMA,IAAN;AACA,OAAK,IAAIC,KAAT,IAAkBD,KAAKE,QAAvB,EAAiC;AAC/B,WAAO9B,SAAS6B,KAAT,CAAP;AACD;AACF;;AAED,eAAeE,UAAf,CAA0BC,IAA1B,EAAqD;AACnD,MAAI3B,OAAO,MAAMH,GAAG+B,KAAH,CAASD,KAAKN,GAAL,EAAT,CAAjB;AACA,MAAIQ,OAAO/B,SAASC,MAAT,CAAgBC,IAAhB,CAAX;AACA,SAAO;AACL2B,QADK;AAELE,QAFK;AAGLC,UAAMD,SAAS/B,SAASI,IAAlB,GAAyBF,KAAK8B,IAA9B,GAAqC,CAHtC;AAILL,cACEI,SAAS/B,SAASM,SAAlB,GACI,MAAM2B,QAAQC,GAAR,CACJ,CAAC,MAAMnC,GAAGoC,OAAH,CAAWN,KAAKN,GAAL,EAAX,CAAP,EAA+Ba,GAA/B,CAAmCjB,QACjCS,WAAW,IAAIP,IAAJ,CAASF,IAAT,EAAeU,IAAf,CAAX,CADF,CADI,CADV,GAMI;AAXD,GAAP;AAaD;;AAEM,eAAe/B,IAAf,CAAoBuC,KAApB,EAAoD;AACzD,MAAIL,OAAO,CAAX;AACA,MAAIM,QAAQ,CAAZ;AACA,MAAIC,QAAQ,EAAZ;AACA,OAAK,IAAIV,IAAT,IAAiBQ,KAAjB,EAAwB;AACtB,UAAM,mBAAS,YAAWR,KAAKN,GAAL,EAAW,EAA/B,CAAN;AACA,QAAIiB,OAAO,MAAMZ,WAAWC,IAAX,CAAjB;AACA,SAAK,IAAIJ,IAAT,IAAiB5B,SAAS2C,IAAT,CAAjB,EAAiC;AAC/BF;AACAN,cAAQP,KAAKO,IAAb;AACD;AACDO,UAAME,IAAN,CAAWD,IAAX;AACD;AACD,QAAM,mBAAS,SAAQ,wBAAaF,KAAb,EAAoB,CAApB,CAAuB,WAAU,uBAAYN,IAAZ,CAAkB,EAApE,CAAN;AACA,SAAOO,KAAP;AACD","file":"scanning.js","sourcesContent":["// @flow\nimport * as fs from './promise_fs';\nimport {sep as DIR_SEP} from 'path';\nimport {formatBytes, printLn, newCid, formatNumber} from './util';\n\nexport class FileType {\n  static create(stat: fs.Stats): FileType {\n    if (stat.isFile()) return FileType.File;\n    if (stat.isDirectory()) return FileType.Directory;\n    if (stat.isSymbolicLink()) return FileType.Symlink;\n    if (stat.isBlockDevice()) return FileType.BlockDev;\n    if (stat.isCharacterDevice()) return FileType.CharDev;\n    if (stat.isFIFO()) return FileType.FIFO;\n    if (stat.isSocket()) return FileType.Socket;\n    return FileType.Unknown;\n  }\n\n  static File: FileType = new FileType('file');\n  static Directory: FileType = new FileType('dir');\n  static Symlink: FileType = new FileType('link');\n  static BlockDev: FileType = new FileType('block');\n  static CharDev: FileType = new FileType('char');\n  static FIFO: FileType = new FileType('pipe');\n  static Socket: FileType = new FileType('socket');\n  static Unknown: FileType = new FileType('unknown');\n\n  name: string;\n  cid: number;\n  constructor(name: string) {\n    this.cid = newCid();\n    this.name = name;\n  }\n}\n\n/**\n * To save on memory for large trees, nodes with parents only contain the\n * basename of their path as `name`. A full path can be made by following\n * the parents. Nodes without parents have a full path as `name`.\n */\nexport class Path {\n  name: string;\n  parent: ?Path;\n  constructor(name: string, parent?: Path) {\n    this.name = name;\n    this.parent = parent;\n  }\n  get(): string {\n    let {name, parent} = this;\n    return parent ? parent.join(name) : name;\n  }\n  // noinspection JSUnusedGlobalSymbols\n  join(name: string): string {\n    return this.get() + DIR_SEP + name;\n  }\n}\n\nexport interface Node {\n  +type: FileType;\n  +path: Path;\n  +size: number;\n  +children: $ReadOnlyArray<Node>;\n}\n\nexport function* traverse(node: Node): Iterable<Node> {\n  yield node;\n  for (let child of node.children) {\n    yield* traverse(child);\n  }\n}\n\nasync function createNode(path: Path): Promise<Node> {\n  let stat = await fs.lstat(path.get());\n  let type = FileType.create(stat);\n  return {\n    path,\n    type,\n    size: type === FileType.File ? stat.size : 0,\n    children:\n      type === FileType.Directory\n        ? await Promise.all(\n            (await fs.readdir(path.get())).map(name =>\n              createNode(new Path(name, path)),\n            ),\n          )\n        : [],\n  };\n}\n\nexport async function scan(paths: Path[]): Promise<Node[]> {\n  let size = 0;\n  let count = 0;\n  let roots = [];\n  for (let path of paths) {\n    await printLn(`Scanning ${path.get()}`);\n    let root = await createNode(path);\n    for (let node of traverse(root)) {\n      count++;\n      size += node.size;\n    }\n    roots.push(root);\n  }\n  await printLn(`Found ${formatNumber(count, 0)} files, ${formatBytes(size)}`);\n  return roots;\n}\n"]}