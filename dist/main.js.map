{"version":3,"sources":["../src/main.js"],"names":["main","argv","paths","slice","map","path","roots","root","node","type","cid","name","get","process","then"],"mappings":";;AACA;;AACA;;AACA;;AAEA,eAAeA,IAAf,CAAoBC,IAApB,EAAmD;AACjD,MAAIC,QAAQD,KAAKE,KAAL,CAAW,CAAX,EAAcC,GAAd,CAAkBC,QAAQ,mBAASA,IAAT,CAA1B,CAAZ;AACA,MAAIC,QAAQ,MAAM,oBAAK,MAAM,oBAAKJ,KAAL,CAAX,EAAlB;AACA,OAAK,IAAIK,IAAT,IAAiBD,KAAjB,EAAwB;AACtB,SAAK,IAAIE,IAAT,IAAiB,uBAASD,IAAT,CAAjB,EAAiC;AAC/B,UAAI,EAACE,IAAD,EAAOJ,IAAP,EAAaK,GAAb,KAAoBF,IAAxB;AACA,YAAM,mBAAQ,qBAAUC,KAAKE,IAAL,GAAY,GAAZ,GAAkBD,GAA5B,EAAiC,EAAjC,IAAuC,GAAvC,GAA6CL,KAAKO,GAAL,EAArD,CAAN;AACD;AACF;AACF;;AAED;;AACAZ,KAAKa,QAAQZ,IAAb,EAAmBa,IAAnB,CAAwB,MAAM,mBAAQ,MAAR,CAA9B","file":"main.js","sourcesContent":["// @flow\nimport {padString, printLn} from './util';\nimport {Path, scan} from './scanning';\nimport {read, traverse} from './reading';\n\nasync function main(argv: string[]): Promise<void> {\n  let paths = argv.slice(2).map(path => new Path(path));\n  let roots = await read(await scan(paths));\n  for (let root of roots) {\n    for (let node of traverse(root)) {\n      let {type, path, cid} = node;\n      await printLn(padString(type.name + ' ' + cid, 20) + ' ' + path.get());\n    }\n  }\n}\n\n/* noinspection JSIgnoredPromiseFromCall*/\nmain(process.argv).then(() => printLn('DONE'));\n"]}