'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverse = traverse;
exports.read = read;

var _fileReader = require('./file-reader');

var _fs = require('fs');

var fs = _interopRequireWildcard(_fs);

var _scanning = require('./scanning');

var _util = require('./util');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

async function readlink(path) {
  let buffer = await new Promise((resolve, reject) => {
    fs.readlink(path, (err, buffer) => {
      err ? reject(err) : resolve(buffer);
    });
  });
  return buffer instanceof Buffer ? buffer.toString() : buffer;
}

function* traverse(node) {
  yield node;
  for (let child of node.children) {
    yield* traverse(child);
  }
}

class StringCids {
  constructor() {
    this.map = new Map();
  }

  // noinspection JSUnusedGlobalSymbols
  get(str) {
    let cid = this.map.get(str);
    if (cid === undefined) {
      cid = (0, _util.newCid)();
      this.map.set(str, cid);
    }
    return cid;
  }
}

const DirContentCids = new StringCids();
const LinkContentCids = new StringCids();

async function dirContent(nodes) {
  let data = '';
  for (let node of nodes) {
    let { path, cid } = node;
    data += (0, _util.padString)((await cid) + '', 20) + ' ' + path.name + '\n';
  }
  return data;
}

async function nodeContent(node, children, reader) {
  switch (node.type) {
    case _scanning.FileType.File:
      return reader.add(node);
    case _scanning.FileType.Directory:
      return DirContentCids.get((await dirContent(children)));
    case _scanning.FileType.Symlink:
      return LinkContentCids.get((await readlink(node.path.get())));
    default:
      // For types other than file, directory or symlink, just use the cid
      // attached to the file type.
      return node.type.cid;
  }
}

function start(node, reader) {
  let { path, type, size } = node;
  let children = node.children.map(node => start(node, reader));
  let cid = nodeContent(node, children, reader);
  return { path, size, children, type, cid };
}

async function finish(node) {
  let { path, type, size } = node;
  let children = await Promise.all(node.children.map(finish));
  let cid = await node.cid;
  return { path, size, type, cid, children };
}

async function read(nodes) {
  await (0, _util.printLn)('Reading file data');
  let reader = new _fileReader.FileReader();
  let started = nodes.map(node => start(node, reader));
  await reader.run();
  return await Promise.all(started.map(finish));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWFkaW5nLmpzIl0sIm5hbWVzIjpbInRyYXZlcnNlIiwicmVhZCIsImZzIiwicmVhZGxpbmsiLCJwYXRoIiwiYnVmZmVyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJlcnIiLCJCdWZmZXIiLCJ0b1N0cmluZyIsIm5vZGUiLCJjaGlsZCIsImNoaWxkcmVuIiwiU3RyaW5nQ2lkcyIsIm1hcCIsIk1hcCIsImdldCIsInN0ciIsImNpZCIsInVuZGVmaW5lZCIsInNldCIsIkRpckNvbnRlbnRDaWRzIiwiTGlua0NvbnRlbnRDaWRzIiwiZGlyQ29udGVudCIsIm5vZGVzIiwiZGF0YSIsIm5hbWUiLCJub2RlQ29udGVudCIsInJlYWRlciIsInR5cGUiLCJGaWxlIiwiYWRkIiwiRGlyZWN0b3J5IiwiU3ltbGluayIsInN0YXJ0Iiwic2l6ZSIsImZpbmlzaCIsImFsbCIsInN0YXJ0ZWQiLCJydW4iXSwibWFwcGluZ3MiOiI7Ozs7O1FBc0JpQkEsUSxHQUFBQSxRO1FBc0VLQyxJLEdBQUFBLEk7O0FBekZ0Qjs7QUFDQTs7SUFBWUMsRTs7QUFDWjs7QUFDQTs7OztBQUVBLGVBQWVDLFFBQWYsQ0FBd0JDLElBQXhCLEVBQXVEO0FBQ3JELE1BQUlDLFNBQVMsTUFBTSxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ2xETixPQUFHQyxRQUFILENBQVlDLElBQVosRUFBa0IsQ0FBQ0ssR0FBRCxFQUFNSixNQUFOLEtBQWlCO0FBQ2pDSSxZQUFNRCxPQUFPQyxHQUFQLENBQU4sR0FBb0JGLFFBQVFGLE1BQVIsQ0FBcEI7QUFDRCxLQUZEO0FBR0QsR0FKa0IsQ0FBbkI7QUFLQSxTQUFPQSxrQkFBa0JLLE1BQWxCLEdBQTJCTCxPQUFPTSxRQUFQLEVBQTNCLEdBQStDTixNQUF0RDtBQUNEOztBQU9NLFVBQVVMLFFBQVYsQ0FBbUJZLElBQW5CLEVBQStEO0FBQ3BFLFFBQU1BLElBQU47QUFDQSxPQUFLLElBQUlDLEtB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QVMsNEJBQWI7QUFDQSxNQUFJVSxVQUFVZCxNQUFNVixHQUFOLENBQVVKLFFBQVF3QixNQUFNeEIsSUFBTixFQUFZa0IsTUFBWixDQUFsQixDQUFkO0FBQ0EsUUFBTUEsT0FBT1csR0FBUCxFQUFOO0FBQ0EsU0FBTyxNQUFNbkMsUUFBUWlDLEdBQVIsQ0FBWUMsUUFBUXhCLEdBQVIsQ0FBWXNCLE1BQVosQ0FBWixDQUFiO0FBQ0QiLCJmaWxlIjoicmVhZGluZy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtOb2RlfSBmcm9tICcuL3NjYW5uaW5nJztcbmltcG9ydCB7RmlsZVJlYWRlcn0gZnJvbSAnLi9maWxlLXJlYWRlcic7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQge0ZpbGVUeXBlfSBmcm9tICcuL3NjYW5uaW5nJztcbmltcG9ydCB7cGFkU3RyaW5nLCBwcmludExuLCBuZXdDaWR9IGZyb20gJy4vdXRpbCc7XG5cbmFzeW5jIGZ1bmN0aW9uIHJlYWRsaW5rKHBhdGg6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCBidWZmZXIgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZnMucmVhZGxpbmsocGF0aCwgKGVyciwgYnVmZmVyKSA9PiB7XG4gICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoYnVmZmVyKTtcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBidWZmZXIgaW5zdGFuY2VvZiBCdWZmZXIgPyBidWZmZXIudG9TdHJpbmcoKSA6IGJ1ZmZlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDb21wbGV0ZU5vZGUgZXh0ZW5kcyBOb2RlIHtcbiAgK2NpZDogbnVtYmVyO1xuICArY2hpbGRyZW46ICRSZWFkT25seUFycmF5PENvbXBsZXRlTm9kZT47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogdHJhdmVyc2Uobm9kZTogQ29tcGxldGVOb2RlKTogSXRlcmFibGU8Q29tcGxldGVOb2RlPiB7XG4gIHlpZWxkIG5vZGU7XG4gIGZvciAobGV0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICB5aWVsZCogdHJhdmVyc2UoY2hpbGQpO1xuICB9XG59XG5cbmludGVyZmFjZSBQZW5kaW5nTm9kZSBleHRlbmRzIE5vZGUge1xuICArY2lkOiBQcm9taXNlPG51bWJlcj47XG4gICtjaGlsZHJlbjogJFJlYWRPbmx5QXJyYXk8UGVuZGluZ05vZGU+O1xufVxuXG5jbGFzcyBTdHJpbmdDaWRzIHtcbiAgbWFwID0gbmV3IE1hcCgpO1xuICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG4gIGdldChzdHI6IHN0cmluZyk6IG51bWJlciB7XG4gICAgbGV0IGNpZCA9IHRoaXMubWFwLmdldChzdHIpO1xuICAgIGlmIChjaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2lkID0gbmV3Q2lkKCk7XG4gICAgICB0aGlzLm1hcC5zZXQoc3RyLCBjaWQpO1xuICAgIH1cbiAgICByZXR1cm4gY2lkO1xuICB9XG59XG5cbmNvbnN0IERpckNvbnRlbnRDaWRzID0gbmV3IFN0cmluZ0NpZHMoKTtcbmNvbnN0IExpbmtDb250ZW50Q2lkcyA9IG5ldyBTdHJpbmdDaWRzKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIGRpckNvbnRlbnQobm9kZXM6ICRSZWFkT25seUFycmF5PFBlbmRpbmdOb2RlPik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGxldCBkYXRhID0gJyc7XG4gIGZvciAobGV0IG5vZGUgb2Ygbm9kZXMpIHtcbiAgICBsZXQge3BhdGgsIGNpZH0gPSBub2RlO1xuICAgIGRhdGEgKz0gcGFkU3RyaW5nKChhd2FpdCBjaWQpICsgJycsIDIwKSArICcgJyArIHBhdGgubmFtZSArICdcXG4nO1xuICB9XG4gIHJldHVybiBkYXRhO1xufVxuXG5hc3luYyBmdW5jdGlvbiBub2RlQ29udGVudChcbiAgbm9kZTogTm9kZSxcbiAgY2hpbGRyZW46IFBlbmRpbmdOb2RlW10sXG4gIHJlYWRlcjogRmlsZVJlYWRlcixcbik6IFByb21pc2U8bnVtYmVyPiB7XG4gIHN3aXRjaCAobm9kZS50eXBlKSB7XG4gICAgY2FzZSBGaWxlVHlwZS5GaWxlOlxuICAgICAgcmV0dXJuIHJlYWRlci5hZGQobm9kZSk7XG4gICAgY2FzZSBGaWxlVHlwZS5EaXJlY3Rvcnk6XG4gICAgICByZXR1cm4gRGlyQ29udGVudENpZHMuZ2V0KGF3YWl0IGRpckNvbnRlbnQoY2hpbGRyZW4pKTtcbiAgICBjYXNlIEZpbGVUeXBlLlN5bWxpbms6XG4gICAgICByZXR1cm4gTGlua0NvbnRlbnRDaWRzLmdldChhd2FpdCByZWFkbGluayhub2RlLnBhdGguZ2V0KCkpKTtcbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIHR5cGVzIG90aGVyIHRoYW4gZmlsZSwgZGlyZWN0b3J5IG9yIHN5bWxpbmssIGp1c3QgdXNlIHRoZSBjaWRcbiAgICAgIC8vIGF0dGFjaGVkIHRvIHRoZSBmaWxlIHR5cGUuXG4gICAgICByZXR1cm4gbm9kZS50eXBlLmNpZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydChub2RlOiBOb2RlLCByZWFkZXI6IEZpbGVSZWFkZXIpOiBQZW5kaW5nTm9kZSB7XG4gIGxldCB7cGF0aCwgdHlwZSwgc2l6ZX0gPSBub2RlO1xuICBsZXQgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuLm1hcChub2RlID0+IHN0YXJ0KG5vZGUsIHJlYWRlcikpO1xuICBsZXQgY2lkID0gbm9kZUNvbnRlbnQobm9kZSwgY2hpbGRyZW4sIHJlYWRlcik7XG4gIHJldHVybiB7cGF0aCwgc2l6ZSwgY2hpbGRyZW4sIHR5cGUsIGNpZH07XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGZpbmlzaChub2RlOiBQZW5kaW5nTm9kZSk6IFByb21pc2U8Q29tcGxldGVOb2RlPiB7XG4gIGxldCB7cGF0aCwgdHlwZSwgc2l6ZX0gPSBub2RlO1xuICBsZXQgY2hpbGRyZW4gPSBhd2FpdCBQcm9taXNlLmFsbChub2RlLmNoaWxkcmVuLm1hcChmaW5pc2gpKTtcbiAgbGV0IGNpZCA9IGF3YWl0IG5vZGUuY2lkO1xuICByZXR1cm4ge3BhdGgsIHNpemUsIHR5cGUsIGNpZCwgY2hpbGRyZW59O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZChub2RlczogTm9kZVtdKTogUHJvbWlzZTxDb21wbGV0ZU5vZGVbXT4ge1xuICBhd2FpdCBwcmludExuKCdSZWFkaW5nIGZpbGUgZGF0YScpO1xuICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgbGV0IHN0YXJ0ZWQgPSBub2Rlcy5tYXAobm9kZSA9PiBzdGFydChub2RlLCByZWFkZXIpKTtcbiAgYXdhaXQgcmVhZGVyLnJ1bigpO1xuICByZXR1cm4gYXdhaXQgUHJvbWlzZS5hbGwoc3RhcnRlZC5tYXAoZmluaXNoKSk7XG59XG4iXX0=