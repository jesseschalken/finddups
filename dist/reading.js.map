{"version":3,"sources":["../src/reading.js"],"names":["read","fs","StringCids","map","Map","get","str","cid","undefined","set","DirContentCids","LinkContentCids","dirContent","nodes","data","node","path","name","reader","nodeContent","children","type","File","add","Directory","Symlink","readlink","readNode","size","Promise","all","done","run"],"mappings":";;;;;QA6CsBA,I,GAAAA,I;;AA1CtB;;AACA;;IAAYC,E;;AACZ;;AACA;;AACA;;;;AAYA,MAAMC,UAAN,CAAiB;AAAA;AAAA,SACfC,GADe,GACT,IAAIC,GAAJ,EADS;AAAA;;AAEfC,MAAIC,GAAJ,EAAyB;AACvB,QAAIC,MAAM,KAAKJ,GAAL,CAASE,GAAT,CAAaC,GAAb,CAAV;AACA,QAAIC,QAAQC,SAAZ,EAAuB;AACrBD,YAAM,mBAAN;AACA,WAAKJ,GAAL,CAASM,GAAT,CAAaH,GAAb,EAAkBC,GAAlB;AACD;AACD,WAAOA,GAAP;AACD;AATc;;AAYjB,MAAMG,iBAAiB,IAAIR,UAAJ,EAAvB;AACA,MAAMS,kBAAkB,IAAIT,UAAJ,EAAxB;;AAEA,SAASU,UAAT,CAAoBC,KAApB,EAAmD;AACjD,MAAIC,OAAO,EAAX;AACA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtB,QAAI,CAAC,4BAAUE,IAAV,CAAL,EAAsB;AACpB,UAAI,EAACC,IAAD,EAAOT,GAAP,KAAcQ,IAAlB;AACAD,cAAQ,qBAAUP,MAAM,EAAhB,EAAoB,EAApB,IAA0B,GAA1B,GAAgCS,KAAKC,IAArC,GAA4C,IAApD;AACD;AACF;AACD,SAAOH,IAAP;AACD;;AAEM,eAAed,IAAf,CAAoBa,KAApB,EAA4D;AACjE,MAAIK,SAAS,4BAAb;;AAEA,iBAAeC,WAAf,CACEJ,IADF,EAEEK,QAFF,EAGmB;AACjB,YAAQL,KAAKM,IAAb;AACE,WAAK,mBAASC,IAAd;AACE,eAAOJ,OAAOK,GAAP,CAAWR,IAAX,CAAP;AACF,WAAK,mBAASS,SAAd;AACE,eAAOd,eAAeL,GAAf,CAAmBO,YAAW,MAAMQ,QAAjB,EAAnB,CAAP;AACF,WAAK,mBAASK,OAAd;AACE,eAAOd,gBAAgBN,GAAhB,EAAoB,MAAMJ,GAAGyB,QAAH,CAAYX,KAAKC,IAAL,CAAUX,GAAV,EAAZ,CAA1B,EAAP;AACF;AACE;AACA;AACA,eAAOU,KAAKM,IAAL,CAAUd,GAAjB;AAVJ;AAYD;;AAED,iBAAeoB,QAAf,CAAwBZ,IAAxB,EAA2D;AACzD,QAAI,EAACC,IAAD,EAAOK,IAAP,EAAaO,IAAb,KAAqBb,IAAzB;AACA;AACA;AACA;AACA,QAAIK,WAAWS,QAAQC,GAAR,CAAYf,KAAKK,QAAL,CAAcjB,GAAd,CAAkBwB,QAAlB,CAAZ,CAAf;AACA,QAAIpB,MAAM,MAAMY,YAAYJ,IAAZ,EAAkBK,QAAlB,CAAhB;AACA,WAAO,EAACJ,IAAD,EAAOY,IAAP,EAAaR,UAAU,MAAMA,QAA7B,EAAuCC,IAAvC,EAA6Cd,GAA7C,EAAP;AACD;;AAED,MAAIwB,OAAOF,QAAQC,GAAR,CAAYjB,MAAMV,GAAN,CAAUwB,QAAV,CAAZ,CAAX;AACA,QAAMT,OAAOc,GAAP,EAAN;AACA,SAAO,MAAMD,IAAb;AACD","file":"reading.js","sourcesContent":["// @flow\n\nimport type {Node} from './scanning';\nimport {FileReader} from './file-reader';\nimport * as fs from './promise_fs';\nimport {FileType} from './scanning';\nimport {padString, newCid} from './util';\nimport {isIgnored} from './ignore-rules';\n\nexport interface CompleteNode extends Node {\n  +cid: number;\n  +children: $ReadOnlyArray<CompleteNode>;\n}\n\ninterface PendingNode extends Node {\n  +cid: Promise<number>;\n  +children: $ReadOnlyArray<PendingNode>;\n}\n\nclass StringCids {\n  map = new Map();\n  get(str: string): number {\n    let cid = this.map.get(str);\n    if (cid === undefined) {\n      cid = newCid();\n      this.map.set(str, cid);\n    }\n    return cid;\n  }\n}\n\nconst DirContentCids = new StringCids();\nconst LinkContentCids = new StringCids();\n\nfunction dirContent(nodes: CompleteNode[]): string {\n  let data = '';\n  for (let node of nodes) {\n    if (!isIgnored(node)) {\n      let {path, cid} = node;\n      data += padString(cid + '', 20) + ' ' + path.name + '\\n';\n    }\n  }\n  return data;\n}\n\nexport async function read(nodes: Node[]): Promise<CompleteNode[]> {\n  let reader = new FileReader();\n\n  async function nodeContent(\n    node: Node,\n    children: Promise<CompleteNode[]>,\n  ): Promise<number> {\n    switch (node.type) {\n      case FileType.File:\n        return reader.add(node);\n      case FileType.Directory:\n        return DirContentCids.get(dirContent(await children));\n      case FileType.Symlink:\n        return LinkContentCids.get(await fs.readlink(node.path.get()));\n      default:\n        // For types other than file, directory or symlink, just use the cid\n        // attached to the file type.\n        return node.type.cid;\n    }\n  }\n\n  async function readNode(node: Node): Promise<CompleteNode> {\n    let {path, type, size} = node;\n    // The FileReader needs all files to be added to it before being started,\n    // which is what nodeContent() does, so it is important that we don't await\n    // on our children until nodeContent() has been called.\n    let children = Promise.all(node.children.map(readNode));\n    let cid = await nodeContent(node, children);\n    return {path, size, children: await children, type, cid};\n  }\n\n  let done = Promise.all(nodes.map(readNode));\n  await reader.run();\n  return await done;\n}\n"]}