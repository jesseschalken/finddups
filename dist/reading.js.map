{"version":3,"sources":["../src/reading.js"],"names":["traverse","read","fs","node","child","children","StringCids","map","Map","get","str","cid","undefined","set","DirContentCids","LinkContentCids","dirContent","nodes","data","path","name","nodeContent","reader","type","File","add","Directory","Symlink","readlink","start","size","finish","Promise","all","started","run"],"mappings":"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","file":"reading.js","sourcesContent":["// @flow\n\nimport type {Node} from './scanning';\nimport {FileReader} from './file-reader';\nimport * as fs from './promise_fs';\nimport {FileType} from './scanning';\nimport {padString, newCid} from './util';\n\nexport interface CompleteNode extends Node {\n  +cid: number;\n  +children: $ReadOnlyArray<CompleteNode>;\n}\n\nexport function* traverse(node: CompleteNode): Iterable<CompleteNode> {\n  yield node;\n  for (let child of node.children) {\n    yield* traverse(child);\n  }\n}\n\ninterface PendingNode extends Node {\n  +cid: Promise<number>;\n  +children: $ReadOnlyArray<PendingNode>;\n}\n\nclass StringCids {\n  map = new Map();\n  // noinspection JSUnusedGlobalSymbols\n  get(str: string): number {\n    let cid = this.map.get(str);\n    if (cid === undefined) {\n      cid = newCid();\n      this.map.set(str, cid);\n    }\n    return cid;\n  }\n}\n\nconst DirContentCids = new StringCids();\nconst LinkContentCids = new StringCids();\n\nasync function dirContent(nodes: $ReadOnlyArray<PendingNode>): Promise<string> {\n  let data = '';\n  for (let node of nodes) {\n    let {path, cid} = node;\n    data += padString((await cid) + '', 20) + ' ' + path.name + '\\n';\n  }\n  return data;\n}\n\nasync function nodeContent(\n  node: Node,\n  children: PendingNode[],\n  reader: FileReader,\n): Promise<number> {\n  switch (node.type) {\n    case FileType.File:\n      return reader.add(node);\n    case FileType.Directory:\n      return DirContentCids.get(await dirContent(children));\n    case FileType.Symlink:\n      return LinkContentCids.get(await fs.readlink(node.path.get()));\n    default:\n      // For types other than file, directory or symlink, just use the cid\n      // attached to the file type.\n      return node.type.cid;\n  }\n}\n\nfunction start(node: Node, reader: FileReader): PendingNode {\n  let {path, type, size} = node;\n  let children = node.children.map(node => start(node, reader));\n  let cid = nodeContent(node, children, reader);\n  return {path, size, children, type, cid};\n}\n\nasync function finish(node: PendingNode): Promise<CompleteNode> {\n  let {path, type, size} = node;\n  let children = await Promise.all(node.children.map(finish));\n  let cid = await node.cid;\n  return {path, size, type, cid, children};\n}\n\nexport async function read(nodes: Node[]): Promise<CompleteNode[]> {\n  let reader = new FileReader();\n  let started = nodes.map(node => start(node, reader));\n  await reader.run();\n  return await Promise.all(started.map(finish));\n}\n"]}