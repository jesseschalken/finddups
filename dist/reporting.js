'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.report = report;

var _reading = require('./reading');

var _util = require('./util');

var _readline = require('readline');

var readline = _interopRequireWildcard(_readline);

var _promise_fs = require('./promise_fs');

var fs = _interopRequireWildcard(_promise_fs);

var _path = require('path');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

async function report(roots) {
  let groups = gatherDuplicates(roots);
  let count = (0, _util.formatNumber)(groups.length);
  let bytes = (0, _util.formatBytes)((0, _util.sum)(groups, group => amountDuplicated(group)));
  await (0, _util.printLn)();
  await (0, _util.printLn)(`Found ${count} duplicate sets, ${bytes} duplicated`);
  await runReport(groups);
}

function amountDuplicated(nodes) {
  if (nodes.length === 0) return 0;
  return deepSize(nodes[0]) * (nodes.length - 1);
}

function deepSize(node) {
  let size = 0;
  for (let node2 of (0, _reading.traverse)(node)) {
    size += node2.size;
  }
  return size;
}

function getDuplicateCids(roots) {
  let one = new Set();
  let many = new Set();
  for (let root of roots) {
    for (let node of (0, _reading.traverse)(root)) {
      let { cid } = node;
      if (one.has(cid)) {
        many.add(cid);
      } else {
        one.add(cid);
      }
    }
  }
  return many;
}

function gatherDuplicates(roots) {
  let dups = getDuplicateCids(roots);
  let map = new Map();
  function add(node) {
    let { cid } = node;
    if (!dups.has(cid)) {
      for (let child of node.children) {
        add(child);
      }
    } else {
      let list = map.get(cid);
      if (list === undefined) {
        list = [];
        map.set(cid, list);
      }
      list.push(node);
    }
  }
  for (let root of roots) {
    add(root);
  }
  return Array.from(map.values()).filter(x => x.length > 1);
}

async function runReport(groups) {
  groups = groups.sort((a, b) => amountDuplicated(b) - amountDuplicated(a));

  let rl = new Readline();
  let index = 0;
  let quit = false;
  while (groups.length > 0 && !quit) {
    index = (index + groups.length) % groups.length;
    let group = groups[index];
    let count = group.length;
    let bytes = (0, _util.formatBytes)(amountDuplicated(group));
    let info = group[0].type.name + ' ' + group[0].cid;

    await (0, _util.printLn)();
    await (0, _util.printLn)(`${index + 1}/${groups.length}: ${info} (${count} copies, ${bytes} duplicated)`);

    let options = new Map();
    for (let i = 0; i < group.length; i++) {
      let { path } = group[i];
      options.set(`${i + 1}`, {
        name: `Keep only "${path.get()}"`,
        async action() {
          for (let j = 0; j < group.length; j++) {
            let { path: path2 } = group[j];
            if (i !== j) {
              await removeRecursive(path2.get());
            }
          }
          // Delete the group
          groups.splice(index, 1);
        }
      });
    }
    options.set('D', {
      name: 'Delete ALL',
      async action() {
        for (let { path } of group) {
          await removeRecursive(path.get());
        }
        // Delete the group
        groups.splice(index, 1);
      }
    });
    options.set('n', {
      name: 'Next duplicate',
      async action() {
        index++;
      }
    });
    options.set('p', {
      name: 'Previous duplicate',
      async action() {
        index--;
      }
    });
    options.set('q', {
      name: 'Quit',
      async action() {
        quit = true;
      }
    });
    await rl.choose(options);
  }
  rl.close();
  await (0, _util.printLn)();
  if (quit) {
    await (0, _util.printLn)('Quit');
  } else {
    await (0, _util.printLn)('DONE');
  }
}

class Readline {
  constructor() {
    this.rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
  }
  close() {
    this.rl.close();
  }
  async choose(options) {
    while (true) {
      let question = 'Please select an option:\n';
      for (let [key, { name }] of options) {
        question += `  ${key}: ${name}\n`;
      }
      question += '> ';
      let response = await new Promise(resolve => {
        this.rl.question(question, answer => {
          resolve(answer);
        });
      });
      response = response.trim();
      let option = options.get(response);
      if (option !== undefined) {
        await option.action();
        return;
      }
    }
  }
}

async function removeRecursive(path) {
  let stat = await fs.lstat(path);
  if (stat.isDirectory()) {
    for (let name of await fs.readdir(path)) {
      await removeRecursive(path + _path.sep + name);
    }
    await (0, _util.printLn)('rmdir ' + path);
    await fs.rmdir(path);
  } else {
    await (0, _util.printLn)('unlink ' + path);
    await fs.unlink(path);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXBvcnRpbmcuanMiXSwibmFtZXMiOlsicmVwb3J0IiwicmVhZGxpbmUiLCJmcyIsInJvb3RzIiwiZ3JvdXBzIiwiZ2F0aGVyRHVwbGljYXRlcyIsImNvdW50IiwibGVuZ3RoIiwiYnl0ZXMiLCJncm91cCIsImFtb3VudER1cGxpY2F0ZWQiLCJydW5SZXBvcnQiLCJub2RlcyIsImRlZXBTaXplIiwibm9kZSIsInNpemUiLCJub2RlMiIsImdldER1cGxpY2F0ZUNpZHMiLCJvbmUiLCJTZXQiLCJtYW55Iiwicm9vdCIsImNpZCIsImhhcyIsImFkZCIsImR1cHMiLCJtYXAiLCJNYXAiLCJjaGlsZCIsImNoaWxkcmVuIiwibGlzdCIsImdldCIsInVuZGVmaW5lZCIsInNldCIsInB1c2giLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJ4Iiwic29ydCIsImEiLCJiIiwicmwiLCJSZWFkbGluZSIsImluZGV4IiwicXVpdCIsImluZm8iLCJ0eXBlIiwibmFtZSIsIm9wdGlvbnMiLCJpIiwicGF0aCIsImFjdGlvbiIsImoiLCJwYXRoMiIsInJlbW92ZVJlY3Vyc2l2ZSIsInNwbGljZSIsImNob29zZSIsImNsb3NlIiwiY29uc3RydWN0b3IiLCJjcmVhdGVJbnRlcmZhY2UiLCJpbnB1dCIsInByb2Nlc3MiLCJzdGRpbiIsIm91dHB1dCIsInN0ZG91dCIsInF1ZXN0aW9uIiwia2V5IiwicmVzcG9uc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsImFuc3dlciIsInRyaW0iLCJvcHRpb24iLCJzdGF0IiwibHN0YXQiLCJpc0RpcmVjdG9yeSIsInJlYWRkaXIiLCJybWRpciIsInVubGluayJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFTc0JBLE0sR0FBQUEsTTs7QUFOdEI7O0FBQ0E7O0FBQ0E7O0lBQVlDLFE7O0FBQ1o7O0lBQVlDLEU7O0FBQ1o7Ozs7QUFFTyxlQUFlRixNQUFmLENBQXNCRyxLQUF0QixFQUE0RDtBQUNqRSxNQUFJQyxTQUFTQyxpQkFB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LENBQU47QUFDRCxHQU5ELE1BTU87QUFDTCxVQUFNLG1CQUFRLFlBQVlBLElBQXBCLENBQU47QUFDQSxVQUFNbEQsR0FBRzhFLE1BQUgsQ0FBVTVCLElBQVYsQ0FBTjtBQUNEO0FBQ0YiLCJmaWxlIjoicmVwb3J0aW5nLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge0NvbXBsZXRlTm9kZX0gZnJvbSAnLi9yZWFkaW5nJztcbmltcG9ydCB7dHJhdmVyc2V9IGZyb20gJy4vcmVhZGluZyc7XG5pbXBvcnQge2Zvcm1hdEJ5dGVzLCBmb3JtYXROdW1iZXIsIHByaW50TG4sIHN1bX0gZnJvbSAnLi91dGlsJztcbmltcG9ydCAqIGFzIHJlYWRsaW5lIGZyb20gJ3JlYWRsaW5lJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJy4vcHJvbWlzZV9mcyc7XG5pbXBvcnQge3NlcCBhcyBESVJfU0VQfSBmcm9tICdwYXRoJztcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlcG9ydChyb290czogQ29tcGxldGVOb2RlW10pOiBQcm9taXNlPHZvaWQ+IHtcbiAgbGV0IGdyb3VwcyA9IGdhdGhlckR1cGxpY2F0ZXMocm9vdHMpO1xuICBsZXQgY291bnQgPSBmb3JtYXROdW1iZXIoZ3JvdXBzLmxlbmd0aCk7XG4gIGxldCBieXRlcyA9IGZvcm1hdEJ5dGVzKHN1bShncm91cHMsIGdyb3VwID0+IGFtb3VudER1cGxpY2F0ZWQoZ3JvdXApKSk7XG4gIGF3YWl0IHByaW50TG4oKTtcbiAgYXdhaXQgcHJpbnRMbihgRm91bmQgJHtjb3VudH0gZHVwbGljYXRlIHNldHMsICR7Ynl0ZXN9IGR1cGxpY2F0ZWRgKTtcbiAgYXdhaXQgcnVuUmVwb3J0KGdyb3Vwcyk7XG59XG5cbmZ1bmN0aW9uIGFtb3VudER1cGxpY2F0ZWQobm9kZXM6IENvbXBsZXRlTm9kZVtdKTogbnVtYmVyIHtcbiAgaWYgKG5vZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIDA7XG4gIHJldHVybiBkZWVwU2l6ZShub2Rlc1swXSkgKiAobm9kZXMubGVuZ3RoIC0gMSk7XG59XG5cbmZ1bmN0aW9uIGRlZXBTaXplKG5vZGU6IENvbXBsZXRlTm9kZSk6IG51bWJlciB7XG4gIGxldCBzaXplID0gMDtcbiAgZm9yIChsZXQgbm9kZTIgb2YgdHJhdmVyc2Uobm9kZSkpIHtcbiAgICBzaXplICs9IG5vZGUyLnNpemU7XG4gIH1cbiAgcmV0dXJuIHNpemU7XG59XG5cbmZ1bmN0aW9uIGdldER1cGxpY2F0ZUNpZHMocm9vdHM6IENvbXBsZXRlTm9kZVtdKTogU2V0PG51bWJlcj4ge1xuICBsZXQgb25lID0gbmV3IFNldCgpO1xuICBsZXQgbWFueSA9IG5ldyBTZXQoKTtcbiAgZm9yIChsZXQgcm9vdCBvZiByb290cykge1xuICAgIGZvciAobGV0IG5vZGUgb2YgdHJhdmVyc2Uocm9vdCkpIHtcbiAgICAgIGxldCB7Y2lkfSA9IG5vZGU7XG4gICAgICBpZiAob25lLmhhcyhjaWQpKSB7XG4gICAgICAgIG1hbnkuYWRkKGNpZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbmUuYWRkKGNpZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYW55O1xufVxuXG5mdW5jdGlvbiBnYXRoZXJEdXBsaWNhdGVzKHJvb3RzOiBDb21wbGV0ZU5vZGVbXSk6IENvbXBsZXRlTm9kZVtdW10ge1xuICBsZXQgZHVwcyA9IGdldER1cGxpY2F0ZUNpZHMocm9vdHMpO1xuICBsZXQgbWFwID0gbmV3IE1hcCgpO1xuICBmdW5jdGlvbiBhZGQobm9kZTogQ29tcGxldGVOb2RlKTogdm9pZCB7XG4gICAgbGV0IHtjaWR9ID0gbm9kZTtcbiAgICBpZiAoIWR1cHMuaGFzKGNpZCkpIHtcbiAgICAgIGZvciAobGV0IGNoaWxkIG9mIG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgYWRkKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGxpc3QgPSBtYXAuZ2V0KGNpZCk7XG4gICAgICBpZiAobGlzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxpc3QgPSBbXTtcbiAgICAgICAgbWFwLnNldChjaWQsIGxpc3QpO1xuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfVxuICBmb3IgKGxldCByb290IG9mIHJvb3RzKSB7XG4gICAgYWRkKHJvb3QpO1xuICB9XG4gIHJldHVybiBBcnJheS5mcm9tKG1hcC52YWx1ZXMoKSkuZmlsdGVyKHggPT4geC5sZW5ndGggPiAxKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVuUmVwb3J0KGdyb3VwczogQ29tcGxldGVOb2RlW11bXSk6IFByb21pc2U8dm9pZD4ge1xuICBncm91cHMgPSBncm91cHMuc29ydCgoYSwgYikgPT4gYW1vdW50RHVwbGljYXRlZChiKSAtIGFtb3VudER1cGxpY2F0ZWQoYSkpO1xuXG4gIGxldCBybCA9IG5ldyBSZWFkbGluZSgpO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgcXVpdCA9IGZhbHNlO1xuICB3aGlsZSAoZ3JvdXBzLmxlbmd0aCA+IDAgJiYgIXF1aXQpIHtcbiAgICBpbmRleCA9IChpbmRleCArIGdyb3Vwcy5sZW5ndGgpICUgZ3JvdXBzLmxlbmd0aDtcbiAgICBsZXQgZ3JvdXAgPSBncm91cHNbaW5kZXhdO1xuICAgIGxldCBjb3VudCA9IGdyb3VwLmxlbmd0aDtcbiAgICBsZXQgYnl0ZXMgPSBmb3JtYXRCeXRlcyhhbW91bnREdXBsaWNhdGVkKGdyb3VwKSk7XG4gICAgbGV0IGluZm8gPSBncm91cFswXS50eXBlLm5hbWUgKyAnICcgKyBncm91cFswXS5jaWQ7XG5cbiAgICBhd2FpdCBwcmludExuKCk7XG4gICAgYXdhaXQgcHJpbnRMbihcbiAgICAgIGAke2luZGV4ICtcbiAgICAgICAgMX0vJHtncm91cHMubGVuZ3RofTogJHtpbmZvfSAoJHtjb3VudH0gY29waWVzLCAke2J5dGVzfSBkdXBsaWNhdGVkKWAsXG4gICAgKTtcblxuICAgIGxldCBvcHRpb25zID0gbmV3IE1hcCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB7cGF0aH0gPSBncm91cFtpXTtcbiAgICAgIG9wdGlvbnMuc2V0KGAke2kgKyAxfWAsIHtcbiAgICAgICAgbmFtZTogYEtlZXAgb25seSBcIiR7cGF0aC5nZXQoKX1cImAsXG4gICAgICAgIGFzeW5jIGFjdGlvbigpIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdyb3VwLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBsZXQge3BhdGg6IHBhdGgyfSA9IGdyb3VwW2pdO1xuICAgICAgICAgICAgaWYgKGkgIT09IGopIHtcbiAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlUmVjdXJzaXZlKHBhdGgyLmdldCgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gRGVsZXRlIHRoZSBncm91cFxuICAgICAgICAgIGdyb3Vwcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfVxuICAgIG9wdGlvbnMuc2V0KCdEJywge1xuICAgICAgbmFtZTogJ0RlbGV0ZSBBTEwnLFxuICAgICAgYXN5bmMgYWN0aW9uKCkge1xuICAgICAgICBmb3IgKGxldCB7cGF0aH0gb2YgZ3JvdXApIHtcbiAgICAgICAgICBhd2FpdCByZW1vdmVSZWN1cnNpdmUocGF0aC5nZXQoKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsZXRlIHRoZSBncm91cFxuICAgICAgICBncm91cHMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgb3B0aW9ucy5zZXQoJ24nLCB7XG4gICAgICBuYW1lOiAnTmV4dCBkdXBsaWNhdGUnLFxuICAgICAgYXN5bmMgYWN0aW9uKCkge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBvcHRpb25zLnNldCgncCcsIHtcbiAgICAgIG5hbWU6ICdQcmV2aW91cyBkdXBsaWNhdGUnLFxuICAgICAgYXN5bmMgYWN0aW9uKCkge1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfSxcbiAgICB9KTtcbiAgICBvcHRpb25zLnNldCgncScsIHtcbiAgICAgIG5hbWU6ICdRdWl0JyxcbiAgICAgIGFzeW5jIGFjdGlvbigpIHtcbiAgICAgICAgcXVpdCA9IHRydWU7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGF3YWl0IHJsLmNob29zZShvcHRpb25zKTtcbiAgfVxuICBybC5jbG9zZSgpO1xuICBhd2FpdCBwcmludExuKCk7XG4gIGlmIChxdWl0KSB7XG4gICAgYXdhaXQgcHJpbnRMbignUXVpdCcpO1xuICB9IGVsc2Uge1xuICAgIGF3YWl0IHByaW50TG4oJ0RPTkUnKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgUmVhZGxpbmVBY3Rpb24ge1xuICArbmFtZTogc3RyaW5nO1xuICArYWN0aW9uOiAoKSA9PiBQcm9taXNlPHZvaWQ+O1xufVxuXG5jbGFzcyBSZWFkbGluZSB7XG4gIHJsOiByZWFkbGluZS5JbnRlcmZhY2U7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucmwgPSByZWFkbGluZS5jcmVhdGVJbnRlcmZhY2Uoe1xuICAgICAgaW5wdXQ6IHByb2Nlc3Muc3RkaW4sXG4gICAgICBvdXRwdXQ6IHByb2Nlc3Muc3Rkb3V0LFxuICAgIH0pO1xuICB9XG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMucmwuY2xvc2UoKTtcbiAgfVxuICBhc3luYyBjaG9vc2Uob3B0aW9uczogTWFwPHN0cmluZywgUmVhZGxpbmVBY3Rpb24+KTogUHJvbWlzZTx2b2lkPiB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBxdWVzdGlvbiA9ICdQbGVhc2Ugc2VsZWN0IGFuIG9wdGlvbjpcXG4nO1xuICAgICAgZm9yIChsZXQgW2tleSwge25hbWV9XSBvZiBvcHRpb25zKSB7XG4gICAgICAgIHF1ZXN0aW9uICs9IGAgICR7a2V5fTogJHtuYW1lfVxcbmA7XG4gICAgICB9XG4gICAgICBxdWVzdGlvbiArPSAnPiAnO1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRoaXMucmwucXVlc3Rpb24ocXVlc3Rpb24sIGFuc3dlciA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShhbnN3ZXIpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgcmVzcG9uc2UgPSByZXNwb25zZS50cmltKCk7XG4gICAgICBsZXQgb3B0aW9uID0gb3B0aW9ucy5nZXQocmVzcG9uc2UpO1xuICAgICAgaWYgKG9wdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGF3YWl0IG9wdGlvbi5hY3Rpb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiByZW1vdmVSZWN1cnNpdmUocGF0aDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gIGxldCBzdGF0ID0gYXdhaXQgZnMubHN0YXQocGF0aCk7XG4gIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICBmb3IgKGxldCBuYW1lIG9mIGF3YWl0IGZzLnJlYWRkaXIocGF0aCkpIHtcbiAgICAgIGF3YWl0IHJlbW92ZVJlY3Vyc2l2ZShwYXRoICsgRElSX1NFUCArIG5hbWUpO1xuICAgIH1cbiAgICBhd2FpdCBwcmludExuKCdybWRpciAnICsgcGF0aCk7XG4gICAgYXdhaXQgZnMucm1kaXIocGF0aCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgcHJpbnRMbigndW5saW5rICcgKyBwYXRoKTtcbiAgICBhd2FpdCBmcy51bmxpbmsocGF0aCk7XG4gIH1cbn1cbiJdfQ==