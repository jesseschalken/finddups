{"version":3,"sources":["../src/progress.js"],"names":["formatTime","t","Number","isFinite","h","m","s","formatPercent","x","formatRate","r","Progress","constructor","total","start","done","running","delay","Date","now","print","format","passed","rate","percent","eta"],"mappings":";;;;;;;AAEA;;AAEA,SAASA,UAAT,CAAoBC,CAApB,EAAuC;AACrC,MAAI,CAACC,OAAOC,QAAP,CAAgBF,CAAhB,CAAL,EAAyB,OAAO,SAAP;AACzB,MAAIG,IAAI,wBAAaH,IAAI,OAAjB,EAA0B,CAA1B,EAA6B,CAA7B,CAAR;AACA,MAAII,IAAI,wBAAcJ,IAAI,KAAL,GAAc,EAA3B,EAA+B,CAA/B,EAAkC,CAAlC,CAAR;AACA,MAAIK,IAAI,wBAAcL,IAAI,IAAL,GAAa,EAA1B,EAA8B,CAA9B,EAAiC,CAAjC,CAAR;AACA,SAAOG,IAAI,GAAJ,GAAUC,CAAV,GAAc,GAAd,GAAoBC,CAA3B;AACD;;AAED,SAASC,aAAT,CAAuBC,CAAvB,EAA0C;AACxC,MAAI,CAACN,OAAOC,QAAP,CAAgBK,CAAhB,CAAL,EAAyBA,IAAI,CAAJ;AACzB,SAAO,wBAAaA,IAAI,GAAjB,EAAsB,CAAtB,IAA2B,GAAlC;AACD;;AAED,SAASC,UAAT,CAAoBC,CAApB,EAAuC;AACrC,MAAI,CAACR,OAAOC,QAAP,CAAgBO,CAAhB,CAAL,EAAyB,OAAO,UAAP;AACzB,SAAO,uBAAYA,IAAI,IAAhB,IAAwB,IAA/B;AACD;;AAEM,MAAMC,QAAN,CAAe;;AAOpBC,cAAYC,QAAgB,CAA5B,EAA+B;AAAA,SAN/BC,KAM+B,GANf,CAMe;AAAA,SAL/BD,KAK+B,GALf,CAKe;AAAA,SAJ/BE,IAI+B,GAJhB,CAIgB;AAAA,SAH/BC,OAG+B,GAHZ,KAGY;AAAA,SAF/BC,KAE+B,GAFf,IAEe;;AAC7B,SAAKJ,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAaI,KAAKC,GAAL,EAAb;AACD;;AAEDC,UAAuB;AACrB,WAAO,mBAAQ,KAAKC,MAAL,EAAR,CAAP;AACD;;AAEDA,WAAiB;AACf,QAAI,EAACN,IAAD,EAAOF,KAAP,EAAcC,KAAd,KAAuB,IAA3B;AACA,QAAIQ,SAASJ,KAAKC,GAAL,KAAaL,KAA1B;AACA,QAAIS,OAAOd,WAAWM,OAAOO,MAAlB,CAAX;AACA,QAAIE,UAAUjB,cAAcQ,OAAOF,KAArB,CAAd;AACA;AACA;AACA,QAAIY,MAAMzB,WAAW,CAACa,QAAQE,IAAT,KAAkBO,SAASP,IAA3B,CAAX,CAAV;;AAEA,WAAQ,GAAES,OAAQ,OAAM,uBAAYX,KAAZ,CAAmB,KAAIU,IAAK,SAAQE,GAAI,EAAhE;AACD;AA1BmB;QAATd,Q,GAAAA,Q","file":"progress.js","sourcesContent":["// @flow\n\nimport {formatBytes, formatNumber, printLn} from './util';\n\nfunction formatTime(t: number): string {\n  if (!Number.isFinite(t)) return 'forever';\n  let h = formatNumber(t / 3600000, 0, 2);\n  let m = formatNumber((t / 60000) % 60, 0, 2);\n  let s = formatNumber((t / 1000) % 60, 0, 2);\n  return h + ':' + m + ':' + s;\n}\n\nfunction formatPercent(x: number): string {\n  if (!Number.isFinite(x)) x = 1;\n  return formatNumber(x * 100, 2) + '%';\n}\n\nfunction formatRate(r: number): string {\n  if (!Number.isFinite(r)) return 'infinite';\n  return formatBytes(r * 1000) + '/s';\n}\n\nexport class Progress {\n  start: number = 0;\n  total: number = 0;\n  done: number = 0;\n  running: boolean = false;\n  delay: number = 1000;\n\n  constructor(total: number = 0) {\n    this.total = total;\n    this.start = Date.now();\n  }\n\n  print(): Promise<void> {\n    return printLn(this.format());\n  }\n\n  format(): string {\n    let {done, total, start} = this;\n    let passed = Date.now() - start;\n    let rate = formatRate(done / passed);\n    let percent = formatPercent(done / total);\n    // The ETA is the milliseconds per byte so far (passed / done) multiplied\n    // by the number of bytes remaining (total - done)\n    let eta = formatTime((total - done) * (passed / done));\n\n    return `${percent} of ${formatBytes(total)}, ${rate}, ETA ${eta}`;\n  }\n}\n"]}