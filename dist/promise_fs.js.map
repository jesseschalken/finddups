{"version":3,"sources":["../src/promise_fs.js"],"names":["open","read","close","readlink","lstat","stat","readdir","rmdir","unlink","fs","path","mode","Promise","resolve","reject","err","fd","length","buffer","Buffer","allocUnsafe","bytesRead","slice","dest","toString","names","sort","a","b"],"mappings":"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","file":"promise_fs.js","sourcesContent":["//@flow\n\nimport * as fs from 'fs';\n\nexport type Stats = fs.Stats;\n\nexport function open(path: string, mode: string): Promise<number> {\n  return new Promise((resolve, reject) => {\n    fs.open(path, mode, (err, fd) => {\n      err ? reject(err) : resolve(fd);\n    });\n  });\n}\n\nexport async function read(fd: number, length: number): Promise<Buffer> {\n  let buffer = Buffer.allocUnsafe(length);\n  let bytesRead = await new Promise((resolve, reject) => {\n    fs.read(fd, buffer, 0, length, null, (err, bytesRead) => {\n      err ? reject(err) : resolve(bytesRead);\n    });\n  });\n  return buffer.slice(0, bytesRead);\n}\n\nexport function close(fd: number): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.close(fd, err => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n\nexport async function readlink(path: string): Promise<string> {\n  const buffer = new Promise((resolve, reject) => {\n    fs.readlink(path, (err, dest) => {\n      err ? reject(err) : resolve(dest);\n    });\n  });\n  return buffer instanceof Buffer ? buffer.toString() : buffer;\n}\n\nexport function lstat(path: string): Promise<Stats> {\n  return new Promise((resolve, reject) => {\n    fs.lstat(path, (err, stat) => {\n      err ? reject(err) : resolve(stat);\n    });\n  });\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport function stat(path: string): Promise<Stats> {\n  return new Promise((resolve, reject) => {\n    fs.stat(path, (err, stat) => {\n      err ? reject(err) : resolve(stat);\n    });\n  });\n}\n\nexport async function readdir(path: string): Promise<string[]> {\n  const names = await new Promise((resolve, reject) => {\n    fs.readdir(path, (err, names) => {\n      err ? reject(err) : resolve(names);\n    });\n  });\n  // Googling gives mixed results about whether fs.readdir() sorts and\n  // whether it sorts on all platforms. Just sort it ourselves to be sure.\n  names.sort((a, b) => (a === b ? 0 : a > b ? 1 : -1));\n  return names;\n}\n\nexport function rmdir(path: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.rmdir(path, err => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n\nexport function unlink(path: string): Promise<void> {\n  return new Promise((resolve, reject) => {\n    fs.unlink(path, err => {\n      err ? reject(err) : resolve();\n    });\n  });\n}\n"]}